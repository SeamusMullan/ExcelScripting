{"version":"0.3.0","body":"/*\nPricing Pack Generation Version 1.1.0 (August 2024)\n\nWritten by Seamus Mullan @ Kirby Group Engineering\nLast Update: 28/08/2024\n\n\nAlways double check the generated tables for errors or missing details\n\n\nContact\n========\n\nEmail: smulan@kirbygroup.com\nIntel WWID: 12277846\n\n(Preferably don't use this unless needed)\nPersonal Email: seamusmullan2023@gmail.com\n\n\nTo-Do\n======\n\n- \n\nContinuous changes\n===================\nNote: These may have to be done manually instead\n===================\n\t\nImplementing extra changes to names (note: usually introduced by revit / modeller)\n\n\n===============================================================================================\nNavisworks CSV Export Legend\n===============================================================================================\nE -> Element\nI -> Item\nC -> Custom\n+ -> Not from Navisworks / Created in this script\n\t\nRequired Columns in same order as Navisworks Selection Inspector\nIndented sections -> all variants / occurances of a measurement\n\t\n(E) ID\n(I) GUID\n(E) Category\n(C) Location (or KGE_Location)\n(E) Name\n(E) Size\n(E) Rod Length\n(E) Length\n    - Any other length values too (Length, length, Length 2, etc.)\n(E) Unistrut Length\n(+) Units (mm/No.)\n(E) Angle\n    - Any other angles too (Angle, angle, Angle 2, etc.)\n(E) Service type\n(C) Raceway Name\n(C) Raceway Ref. Number \n\t\n===============================================================================================\n\t\nIdeally,the csv we are importing should have all of the data in the order shown here,\nexcluding any columns that get created in the script (marked with '+')\n\t\nRepeated data should be merged into a single column and placed according to the above legend\n\t\n===============================================================================================\n*/\n\nfunction log(msg: string) {\n    let loggingOn = 1;\n    if (loggingOn === 1) {\n        console.log(msg);\n    }\n}\n\nfunction removeControlCharacters(str: string): string {\n    // This regex matches all control characters\n    const controlCharsRegex = /[\\u0000-\\u001F\\u007F-\\u009F]/g;\n    return str.replace(controlCharsRegex, '');\n}\n\nlet nameIndex = 0;\nlet unistrutIndex = 0;\nlet angleIndex = 0;\n\nfunction updateHeaders(headerValues: (string | number | boolean)[]) {\n    nameIndex = headerValues.findIndex(header =>\n        typeof header === 'string' && header.toLowerCase().includes(\"name\")\n    );\n    unistrutIndex = headerValues.findIndex(header =>\n        typeof header === 'string' && header.toLowerCase().includes(\"unistrut\")\n    );\n    angleIndex = headerValues.findIndex(header =>\n        typeof header === 'string' && header.toLowerCase().includes(\"angle\")\n    );\n}\n\nfunction main(workbook: ExcelScript.Workbook) {\n    // Get the active worksheet\n    let sheet = workbook.getActiveWorksheet();\n    let usedRange = sheet.getUsedRange();\n\n    // Optimize header processing\n    let headers = usedRange.getRow(0);\n    let headerValues = headers.getValues()[0];\n\n    // Process headers once\n    headerValues = headerValues.map(header => {\n        if (typeof header === 'string') {\n            return header\n                .replace(/Element|Item|Custom|KGE_/gi, \"\")\n                .replace(\"\\n\", \"\")\n                .replace(\"\\\\r\\\\n\", \"\");\n        }\n        return header.toString();\n    });\n    headers.setValues([headerValues]);\n\n    // Set row height and apply autofilter\n    headers.getFormat().setRowHeight(25);\n    sheet.getAutoFilter().apply(headers);\n    sheet.getFreezePanes().freezeRows(1);\n\n\n    // Find important column indices\n    let nameIndex = headerValues.findIndex(header =>\n        typeof header === 'string' && header.toLowerCase().includes(\"name\")\n    );\n    let unistrutIndex = headerValues.findIndex(header =>\n        typeof header === 'string' && header.toLowerCase().includes(\"unistrut\")\n    );\n    let angleIndex = headerValues.findIndex(header =>\n        typeof header === 'string' && header.toLowerCase().includes(\"angle\")\n    );\n\n    if (nameIndex === -1 || unistrutIndex === -1 || angleIndex === -1) {\n        throw new Error(\"Required columns not found\");\n    }\n\n    // Process data in bulk\n    let values = usedRange.getValues();\n\n    // rename angle header to just Angle\n    values[0][angleIndex] = \"Angle\";\n\n    log(values[0].toString());\n\n    // Update names\n    /*\n\t\n    NOTE: These are specific for some parts (M12 -> M10) and the list below should be double checked often to keep it updated!\n\n    */\n\n    const nameMap: { key: string, value: string }[] = [\n        { key: 'P1428-H-', value: 'M1116' },\n        { key: 'M12', value: 'M10' },\n        { key: 'P1062', value: 'P1020' }\n    ];\n    for (let i = 1; i < values.length; i++) {\n        let name = values[i][nameIndex].toString();\n\n        nameMap.forEach((item) => {\n            name.replace(item.key, item.value);\n        });\n\n        // if the name is in the form [words] [number], remove the number\n        // a.k.a, only remove number when seperated by a space, eg:\n        // Casework 2 -> Casework\n        // MIDAS_Plate_2 -> MIDAS_Plate_2\n        const parts = name.split(\" \");\n        if (parts.length > 1 && /^\\d+$/.test(parts[parts.length - 1])) {\n            name = parts.slice(0, -1).join(\" \");\n        }\n\n        values[i][nameIndex] = name;\n    }\n\n    // Process lengths and angles\n    for (let col = 0; col < headerValues.length; col++) {\n        const header = headerValues[col];\n        //log(\"On header \" + header);\n        if (header.toString().toLowerCase().match(\"length\")) {\n            //log(\"Header \" + header + \" is a length header\");\n            for (let row = 1; row < values.length; row++) {\n                values[row][col] = values[row][col].toString().replace(\" mm\", \"\");\n                let value = values[row][col];\n                if (value > 1) {\n                    values[row][unistrutIndex] = value.toString().replace(\" mm\", \"\");\n                    //log(\"Value \" + value + \" added to unistrut column on row \" + row + \" from column \" + header);\n                }\n            }\n        } else if (header.toString().toLowerCase().match(\"angle\") && col !== angleIndex) {\n            for (let row = 1; row < values.length; row++) {\n                let value = values[row][col];\n                if ((value > 1) || (value.toString().toLowerCase().match(\"Â°\"))) {\n                    values[row][angleIndex] = value;\n                }\n            }\n        }\n\n\n    }\n\n    // Fill blank cells in Unistrut column with 1\n    for (let i = 1; i < values.length; i++) {\n        if (values[i][unistrutIndex] === \"\") {\n            values[i][unistrutIndex] = 1;\n        }\n    }\n\n    // Write processed data back to the sheet\n    usedRange.setValues(values);\n\n    // Create table\n    let table = workbook.addTable(usedRange, true);\n\n    // Add \"Units (mm/No.)\" column\n\n    // remove any length column (except unistrut)\n    // for (let col = 0; col < headerValues.length; col++) {\n    // \tlet header = headerValues[col];\n    // \theader = removeControlCharacters(header.toString());\n    // \tif (header.toString().toLowerCase().match(\"length\") && !header.toString().toLowerCase().match(\"unistrut\")) {\n    // \t\tlet column = table.getColumnByName(header);\n    // \t\ttry {\n    // \t\t\tcolumn.delete()\n    // \t\t\tcol--;\n    // \t\t} catch (error) {\n    // \t\t\tlog(error);\n    // \t\t}\n    // \t}\n    // }\n\n    if (nameIndex === -1 || unistrutIndex === -1 || angleIndex === -1) {\n        throw new Error(\"Required columns not found\");\n    }\n\n    values[0][angleIndex] = \"_Angle\";\n\n    let tableRange = workbook.getActiveWorksheet().getUsedRange();\n\n    // delete all length columns (except unistrut)\n    let colCount = tableRange.getColumnCount();\n    for (let i = 0; i < colCount; i++) {\n        let cell = sheet.getCell(0, i);\n        let cellVal = cell.getValue().toString();\n        if (cellVal != \"\") {\n            let col: ExcelScript.TableColumn = table.getColumnByName(cellVal.toLowerCase());\n            log(\"checking column\" + i);\n            log(\"column\" + i + \" named: \" + cellVal);\n            col.setName(cellVal.replace(\"\\n\", \"\"));\n\n            // match headers with length in the name, select and delete their column (if not unistrut)\n            if (cellVal.match(\"[Ll][Ee][Nn][Gg][Tt][Hh].*\")) {\n                if (!(cellVal.match(\"[Uu][Nn][Ii][Ss][Tt][Rr][Uu][Tt]\"))) {\n                    log(\"Deleting column: \" + cellVal);\n                    col.delete();\n                    updateHeaders(headerValues);\n                    i--;\n                }\n            } else if (cellVal.match(\"[Aa][Nn][Gg][Ll][Ee].*\") && !cellVal.match(\"_\")) {\n                log(\"Deleting column: \" + cellVal);\n                log(angleIndex.toString());\n                col.delete();\n                updateHeaders(headerValues);\n                i--;\n            }\n        }\n    }\n\n\n\n    // update important column indices\n    updateHeaders(headerValues);\n\n\n    let angleHeader = sheet.getRange(\"1:1\").find(\"_Angle\", {\n        completeMatch: false,\n        matchCase: false,\n        searchDirection: ExcelScript.SearchDirection.forward\n    });\n    let newAngleIndex = angleHeader.getColumnIndex();\n\n    let unitsIndex = table.addColumn(newAngleIndex, undefined, \"Units (mm/No.)\").getIndex();\n\n    if (nameIndex === -1 || unistrutIndex === -1 || angleIndex === -1) {\n        throw new Error(\"Required columns not found\");\n    }\n    // updateHeaders(headerValues);\n    // log(\"Angle Header: \" + angleIndex.toString());\n    // values[0][angleIndex] = \"Angle\";\n\n    tableRange = workbook.getActiveWorksheet().getUsedRange();\n\n    // Set formula for Units column\n    let unitsFormula = `=IF(INDIRECT(ADDRESS(ROW(),COLUMN()-1))>1,\"mm\",\"No.\")`;\n    // log(unitsIndex.toString());\n    // for (let i = 1; i < values.length; i++) {\n    // \tvalues[i][unitsIndex] = unitsFormula;\n    // }\n\n    let unitsColumn = table.getColumnByName(\"Units (mm/No.)\");\n    unitsColumn.getRangeBetweenHeaderAndTotal().setFormula(unitsFormula);\n    // Rename worksheet\n    sheet.setName(\"Quantifications\");\n\n    updateHeaders(headerValues);\n    log(\"Angle Header: \" + angleIndex.toString());\n    log(values[0][angleIndex].toString());\n    values[0][angleIndex] = \"Angle\";\n\n\n    // Remove Clearance Zones\n    let rowCount = tableRange.getRowCount();\n    for (let i = 1; i < rowCount; i = i + 1) {\n        let cell = sheet.getCell(i, nameIndex);\n        let cellVal = cell.getValue().toString();\n        if (cellVal.toLowerCase().match(\"clearancezone.*\")) {\n            let row = table.getRangeBetweenHeaderAndTotal().getRow(i - 1);\n            log(\"Deleting row \" + i + \" with Element ID\" + row.getColumn(0).getValue())\n            row.getEntireRow().delete(ExcelScript.DeleteShiftDirection.up);\n            i--;\n        }\n    }\n\n    // Format columns\n    let format = table.getRange().getFormat();\n    format.autofitColumns();\n    format.setVerticalAlignment(ExcelScript.VerticalAlignment.center);\n    format.setIndentLevel(0);\n    format.setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);\n\n    // Create Pivot Table\n    let pivotSheet = workbook.addWorksheet(\"Pivot Table\");\n    let pivotTable = pivotSheet.addPivotTable(\"PivotTable1\", table.getRange(), \"A3\");\n\n    // Configure Pivot Table\n    let unitsHierarchy = pivotTable.getHierarchy(\"Units (mm/No.)\");\n    if (unitsHierarchy) {\n        pivotTable.addColumnHierarchy(unitsHierarchy);\n    }\n    pivotTable.getLayout().setShowRowGrandTotals(false);\n}","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}
