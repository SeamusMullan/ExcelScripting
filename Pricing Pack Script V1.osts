{"version":"0.3.0","body":"/*\r\nPricing Pack Generation Version 1.0.0 (August 2024)\r\n\r\nWritten by Seamus Mullan @ Kirby Group Engineering\r\nLast Update: 28/08/2024\r\n\r\n\r\nAlways double check the generated tables for errors or missing details\r\n\r\n\r\nContact\r\n========\r\n\r\nEmail: smulan@kirbygroup.com\r\nIntel WWID: 12277846\r\n\r\n(Preferably don't use this unless needed)\r\nPersonal Email: seamusmullan2023@gmail.com\r\n\r\n\r\nTo-Do\r\n======\r\n\r\n- \r\n\r\nContinuous changes\r\n===================\r\nNote: These may have to be done manually instead\r\n===================\r\n\t\r\nImplementing extra changes to names (note: usually introduced by revit / modeller)\r\n\r\n\r\n===============================================================================================\r\nNavisworks CSV Export Legend\r\n===============================================================================================\r\nE -> Element\r\nI -> Item\r\nC -> Custom\r\n+ -> Not from Navisworks / Created in this script\r\n\t\r\nRequired Columns in same order as Navisworks Selection Inspector\r\nIndented sections -> all variants / occurances of a measurement\r\n\t\r\n(E) ID\r\n(I) GUID\r\n(E) Category\r\n(C) Location (or KGE_Location)\r\n(E) Name\r\n(E) Size\r\n(E) Rod Length\r\n(E) Length\r\n\t- Any other length values too (Length, length, Length 2, etc.)\r\n(E) Unistrut Length\r\n(+) Units (mm/No.)\r\n(E) Angle\r\n\t- Any other angles too (Angle, angle, Angle 2, etc.)\r\n(E) Service type\r\n(C) Raceway Name\r\n(C) Raceway Ref. Number \r\n\t\r\n===============================================================================================\r\n\t\r\nIdeally,the csv we are importing should have all of the data in the order shown here,\r\nexcluding any columns that get created in the script (marked with '+')\r\n\t\r\nRepeated data should be merged into a single column and placed according to the above legend\r\n\t\r\n===============================================================================================\r\n*/\r\n\r\nfunction log(msg: string) {\r\n\tlet loggingOn = 1;\r\n\tif (loggingOn === 1) {\r\n\t\tconsole.log(msg);\r\n\t}\r\n}\r\n\r\nfunction removeControlCharacters(str: string): string {\r\n\t// This regex matches all control characters\r\n\tconst controlCharsRegex = /[\\u0000-\\u001F\\u007F-\\u009F]/g;\r\n\treturn str.replace(controlCharsRegex, '');\r\n}\r\n\r\nlet nameIndex = 0;\r\nlet unistrutIndex = 0;\r\nlet angleIndex = 0;\r\n\r\nfunction updateHeaders(headerValues: (string | number | boolean)[]) {\r\n\tnameIndex = headerValues.findIndex(header =>\r\n\t\ttypeof header === 'string' && header.toLowerCase().includes(\"name\")\r\n\t);\r\n\tunistrutIndex = headerValues.findIndex(header =>\r\n\t\ttypeof header === 'string' && header.toLowerCase().includes(\"unistrut\")\r\n\t);\r\n\tangleIndex = headerValues.findIndex(header =>\r\n\t\ttypeof header === 'string' && header.toLowerCase().includes(\"angle\")\r\n\t);\r\n}\r\n\r\nfunction main(workbook: ExcelScript.Workbook) {\r\n\t// Get the active worksheet\r\n\tlet sheet = workbook.getActiveWorksheet();\r\n\tlet usedRange = sheet.getUsedRange();\r\n\r\n\t// Optimize header processing\r\n\tlet headers = usedRange.getRow(0);\r\n\tlet headerValues = headers.getValues()[0];\r\n\r\n\t// Process headers once\r\n\theaderValues = headerValues.map(header => {\r\n\t\tif (typeof header === 'string') {\r\n\t\t\treturn header\r\n\t\t\t\t.replace(/Element|Item|Custom|KGE_/gi, \"\")\r\n\t\t\t\t.replace(\"\\n\", \"\")\r\n\t\t\t\t.replace(\"\\\\r\\\\n\", \"\");\r\n\t\t}\r\n\t\treturn header.toString();\r\n\t});\r\n\theaders.setValues([headerValues]);\r\n\r\n\t// Set row height and apply autofilter\r\n\theaders.getFormat().setRowHeight(25);\r\n\tsheet.getAutoFilter().apply(headers);\r\n\tsheet.getFreezePanes().freezeRows(1);\r\n\r\n\r\n\t// Find important column indices\r\n\tlet nameIndex = headerValues.findIndex(header =>\r\n\t\ttypeof header === 'string' && header.toLowerCase().includes(\"name\")\r\n\t);\r\n\tlet unistrutIndex = headerValues.findIndex(header =>\r\n\t\ttypeof header === 'string' && header.toLowerCase().includes(\"unistrut\")\r\n\t);\r\n\tlet angleIndex = headerValues.findIndex(header =>\r\n\t\ttypeof header === 'string' && header.toLowerCase().includes(\"angle\")\r\n\t);\r\n\r\n\tif (nameIndex === -1 || unistrutIndex === -1 || angleIndex === -1) {\r\n\t\tthrow new Error(\"Required columns not found\");\r\n\t}\r\n\r\n\t// Process data in bulk\r\n\tlet values = usedRange.getValues();\r\n\r\n\t// rename angle header to just Angle\r\n\tvalues[0][angleIndex] = \"Angle\";\r\n\r\n\tlog(values[0].toString());\r\n\r\n\t// Update names\r\n\t/*\r\n\t\r\n\tNOTE: These are specific for some parts (M12 -> M10) and the list below should be double checked often to keep it updated!\r\n\r\n\t*/\r\n\r\n\tconst nameMap: { key: string, value: string }[] = [\r\n\t\t{ key: 'P1428-H-', value: 'M1116' },\r\n\t\t{ key: 'M12', value: 'M10' },\r\n\t\t{ key: 'P1062', value: 'P1020' }\r\n\t];\r\n\tfor (let i = 1; i < values.length; i++) {\r\n\t\tlet name = values[i][nameIndex].toString();\r\n\r\n\t\tnameMap.forEach((item) => {\r\n\t\t\tname.replace(item.key, item.value);\r\n\t\t});\r\n\r\n\t\t// if the name is in the form [words] [number], remove the number\r\n\t\t// a.k.a, only remove number when seperated by a space, eg:\r\n\t\t// Casework 2 -> Casework\r\n\t\t// MIDAS_Plate_2 -> MIDAS_Plate_2\r\n\t\tconst parts = name.split(\" \");\r\n\t\tif (parts.length > 1 && /^\\d+$/.test(parts[parts.length - 1])) {\r\n\t\t\tname = parts.slice(0, -1).join(\" \");\r\n\t\t}\r\n\r\n\t\tvalues[i][nameIndex] = name;\r\n\t}\r\n\r\n\t// Process lengths and angles\r\n\tfor (let col = 0; col < headerValues.length; col++) {\r\n\t\tconst header = headerValues[col];\r\n\t\t//log(\"On header \" + header);\r\n\t\tif (header.toString().toLowerCase().match(\"length\")) {\r\n\t\t\t//log(\"Header \" + header + \" is a length header\");\r\n\t\t\tfor (let row = 1; row < values.length; row++) {\r\n\t\t\t\tvalues[row][col] = values[row][col].toString().replace(\" mm\", \"\");\r\n\t\t\t\tlet value = values[row][col];\r\n\t\t\t\tif (value > 1) {\r\n\t\t\t\t\tvalues[row][unistrutIndex] = value.toString().replace(\" mm\", \"\");\r\n\t\t\t\t\t//log(\"Value \" + value + \" added to unistrut column on row \" + row + \" from column \" + header);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (header.toString().toLowerCase().match(\"angle\") && col !== angleIndex) {\r\n\t\t\tfor (let row = 1; row < values.length; row++) {\r\n\t\t\t\tlet value = values[row][col];\r\n\t\t\t\tif ((value > 1) || (value.toString().toLowerCase().match(\"Â°\"))) {\r\n\t\t\t\t\tvalues[row][angleIndex] = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\t// Fill blank cells in Unistrut column with 1\r\n\tfor (let i = 1; i < values.length; i++) {\r\n\t\tif (values[i][unistrutIndex] === \"\") {\r\n\t\t\tvalues[i][unistrutIndex] = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t// Write processed data back to the sheet\r\n\tusedRange.setValues(values);\r\n\r\n\t// Create table\r\n\tlet table = workbook.addTable(usedRange, true);\r\n\r\n\t// Add \"Units (mm/No.)\" column\r\n\r\n\t// remove any length column (except unistrut)\r\n\t// for (let col = 0; col < headerValues.length; col++) {\r\n\t// \tlet header = headerValues[col];\r\n\t// \theader = removeControlCharacters(header.toString());\r\n\t// \tif (header.toString().toLowerCase().match(\"length\") && !header.toString().toLowerCase().match(\"unistrut\")) {\r\n\t// \t\tlet column = table.getColumnByName(header);\r\n\t// \t\ttry {\r\n\t// \t\t\tcolumn.delete()\r\n\t// \t\t\tcol--;\r\n\t// \t\t} catch (error) {\r\n\t// \t\t\tlog(error);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\r\n\tif (nameIndex === -1 || unistrutIndex === -1 || angleIndex === -1) {\r\n\t\tthrow new Error(\"Required columns not found\");\r\n\t}\r\n\r\n\tvalues[0][angleIndex] = \"_Angle\";\r\n\r\n\tlet tableRange = workbook.getActiveWorksheet().getUsedRange();\r\n\r\n\t// delete all length columns (except unistrut)\r\n\tlet colCount = tableRange.getColumnCount();\r\n\tfor (let i = 0; i < colCount; i++) {\r\n\t\tlet cell = sheet.getCell(0, i);\r\n\t\tlet cellVal = cell.getValue().toString();\r\n\t\tif (cellVal != \"\") {\r\n\t\t\tlet col: ExcelScript.TableColumn = table.getColumnByName(cellVal.toLowerCase());\r\n\t\t\tlog(\"checking column\" + i);\r\n\t\t\tlog(\"column\" + i + \" named: \" + cellVal);\r\n\t\t\tcol.setName(cellVal.replace(\"\\n\", \"\"));\r\n\r\n\t\t\t// match headers with length in the name, select and delete their column (if not unistrut)\r\n\t\t\tif (cellVal.match(\"[Ll][Ee][Nn][Gg][Tt][Hh].*\")) {\r\n\t\t\t\tif (!(cellVal.match(\"[Uu][Nn][Ii][Ss][Tt][Rr][Uu][Tt]\"))) {\r\n\t\t\t\t\tlog(\"Deleting column: \" + cellVal);\r\n\t\t\t\t\tcol.delete();\r\n\t\t\t\t\tupdateHeaders(headerValues);\r\n\t\t\t\t\ti--;\r\n\t\t\t\t}\r\n\t\t\t} else if (cellVal.match(\"[Aa][Nn][Gg][Ll][Ee].*\") && !cellVal.match(\"_\")) {\r\n\t\t\t\tlog(\"Deleting column: \" + cellVal);\r\n\t\t\t\tlog(angleIndex.toString());\r\n\t\t\t\tcol.delete();\r\n\t\t\t\tupdateHeaders(headerValues);\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t// update important column indices\r\n\tupdateHeaders(headerValues);\r\n\r\n\r\n\tlet angleHeader = sheet.getRange(\"1:1\").find(\"_Angle\", {\r\n\t\tcompleteMatch: false,\r\n\t\tmatchCase: false,\r\n\t\tsearchDirection: ExcelScript.SearchDirection.forward\r\n\t});\r\n\tlet newAngleIndex = angleHeader.getColumnIndex();\r\n\r\n\tlet unitsIndex = table.addColumn(newAngleIndex, undefined, \"Units (mm/No.)\").getIndex();\r\n\r\n\tif (nameIndex === -1 || unistrutIndex === -1 || angleIndex === -1) {\r\n\t\tthrow new Error(\"Required columns not found\");\r\n\t}\r\n\t// updateHeaders(headerValues);\r\n\t// log(\"Angle Header: \" + angleIndex.toString());\r\n\t// values[0][angleIndex] = \"Angle\";\r\n\r\n\ttableRange = workbook.getActiveWorksheet().getUsedRange();\r\n\r\n\t// Set formula for Units column\r\n\tlet unitsFormula = `=IF(INDIRECT(ADDRESS(ROW(),COLUMN()-1))>1,\"mm\",\"No.\")`;\r\n\t// log(unitsIndex.toString());\r\n\t// for (let i = 1; i < values.length; i++) {\r\n\t// \tvalues[i][unitsIndex] = unitsFormula;\r\n\t// }\r\n\r\n\tlet unitsColumn = table.getColumnByName(\"Units (mm/No.)\");\r\n\tunitsColumn.getRangeBetweenHeaderAndTotal().setFormula(unitsFormula);\r\n\t// Rename worksheet\r\n\tsheet.setName(\"Quantifications\");\r\n\r\n\tupdateHeaders(headerValues);\r\n\tlog(\"Angle Header: \" + angleIndex.toString());\r\n\tlog(values[0][angleIndex].toString());\r\n\tvalues[0][angleIndex] = \"Angle\";\r\n\r\n\r\n\t// Format columns\r\n\tlet format = table.getRange().getFormat();\r\n\tformat.autofitColumns();\r\n\tformat.setVerticalAlignment(ExcelScript.VerticalAlignment.center);\r\n\tformat.setIndentLevel(0);\r\n\tformat.setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);\r\n\r\n\t// Create Pivot Table\r\n\tlet pivotSheet = workbook.addWorksheet(\"Pivot Table\");\r\n\tlet pivotTable = pivotSheet.addPivotTable(\"PivotTable1\", table.getRange(), \"A3\");\r\n\r\n\t// Configure Pivot Table\r\n\tlet unitsHierarchy = pivotTable.getHierarchy(\"Units (mm/No.)\");\r\n\tif (unitsHierarchy) {\r\n\t\tpivotTable.addColumnHierarchy(unitsHierarchy);\r\n\t}\r\n\tpivotTable.getLayout().setShowRowGrandTotals(false);\r\n}","description":"Pricing Pack Generation Version 1.0.0 (August 2024)\n\nWritten by Seamus Mullan @ Kirby Group Engineering\nLast Update: 28/08/2024\n\nHow to use:\n- Make sure file is called 'csv.csv' before opening\n- Open your 'csv.csv' file with excel\n- Open the Automate tab, select this script and click run\n- open the 'Pivot Table' sheet, select the table and add the following fields\n\t- Name\n\t- Size\n\t- Unistrut Length\n- Save as a .xlsx file\n\nNOTE: Always double check the generated tables for errors or missing details (e.g. blank cells)\n\nContact:\nEmail: smulan@kirbygroup.com\nIntel WWID: 12277846\n\n(In case of errors / breaking)\nPersonal Email: seamusmullan2023@gmail.com\n\nUnits formula for reference:\n=IF((INDIRECT(ADDRESS(ROW(),COLUMN()-1)))>1,\"mm\",\"No.\")\n","noCodeMetadata":null,"parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}